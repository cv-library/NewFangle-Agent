=encoding UTF-8

=head1 NAME

Plack::Middleware::NewFangle - Unofficial Perl New Relic agent middleware

=head1 SYNOPSIS

    # Use defaults
    enable 'NewFangle';

    # Or customise
    enable NewFangle => (
        start_transaction => sub ($app, $env) { ... },
          end_transaction => sub ($tx,  $res) { ... },

        start_non_web_transaction => sub ($app, $env) { ... },
          end_non_web_transaction => sub ($tx,  $res) { ... },

        error => sub ($tx, $err) { ... },
    );

=head1 DESCRIPTION

This middleware will wrap your web transactions in L<NewFangle::Transaction>
objects, to send monitoring information to New Relic. It is designed to work
together with L<NewFangle::Agent>, but can be used without it.

When a request is started, the current app name (as determined by
L<NewFangle::Agent::Config>) will be used to find an existing
L<NewFangle::App>, and if none is found, one will be created an cached. The
configuration for this application is generated by calling
C<struct> in L<NewFangle::Agent::Config|NewFangle::Agent::Config/struct>.

The middleware takes care of starting a connection to the New Relic daemon
as well, a process which takes place only once.

=head1 CONFIGURATION

The behaviours in Plack::Middleware::NewFangle can be configured via three
main methods: middleware options, the Plack environment, and the values in
L<NewFangle::Agent::Config>.

=head2 Options

When enabled, the following options are allowed:

=head3 Transaction starters

    start_transaction         => sub ( $app, $env ) { ... },
    start_non_web_transaction => sub ( $app, $env ) { ... },

These will be used to start the transactions at the beginning of each request.
They must be set to code references which must return a
L<NewFangle::Transaction> object for the current transaction.

The code references will receive the L<NewFangle::App> and the L<Plack>
environment as the first and second parameters, respectively.

The starter in C<start_non_web_transaction> will be used if this request
has been marked as a background task with C<set_background_task> in the
Plack environment (see details L<below|/The Plack environment>).

=head3 Transaction enders

    end_transaction         => sub ( $tx, $res ) { ... },
    end_non_web_transaction => sub ( $tx, $res ) { ... },

These will be used to end the transaction at the end of each request.
They must be set to code references, which will be called in sink context.

The code references will receive the L<NewFangle::Transaction> and the L<Plack>
response arrayref as the first and second parameters respectively.

The ender in C<end_non_web_transaction> will be used if this request
was started as a background task with C<set_background_task> in the
Plack environment (see details L<below|/The Plack environment>).

=head3 Error handler

    error => sub ( $tx, $err ) { ... },

If an error is caught during execution of the route, this callback will
be executed with the transaction, and the error that was returned.

The default value for this callback uses
L<notice_error_with_stacktrace|NewFangle::Transaction/notice_error_with_stacktrace>
to attach the error to the transaction.

After executing this callback, the middleware takes care of executing the
transaction ender, and re-throwing the error for further handling.

=head2 The Plack environment

Values in the C<newrelic> field in the L<Plack> environment hash reference
will be used as per-request configuration values by this middleware. The
following keys are supported:

=head3 ignore_transaction

If set to a true value, this transaction will not be reported to New Relic.

Defaults to false.

=head3 suppress_transaction_trace

If set to a true value, no transaction trace will be generated for this
transaction, even if it would otherwise be eligible for it.

Defaults to false.

=head3 set_background_task

If set to a true value, this transaction will be recorded as a non-web
transaction, either by using the default transaction starters (which uses
L<start_non_web_transaction|NewFangle::App/start_non_web_transaction>),
or whatever was specified as C<start_non_web_transaction> when the middleware
was enabled (see L<above|/Transaction starters>).

Defaults to false.

=head2 New Relic configuration

In addition to the options described above, this middleware uses the local
configuration from L<NewFangle::Agent::Config> to adjust some parts of its
behaviour. In particular,

=over

=item C<enabled>

This is used to determine whether monitoring is enabled. If set to false,
the middleware does nothing.

=item C<app_name>

This is used to identify the L<NewFangle::App> to use for this transaction.

=item The result of calling C<struct>

As described above, L<NewFangle::App> objects are created and cached to
handle individual transactions. The configuration for these is generated with
C<struct> in L<NewFangle::Agent::Config|NewFangle::Agent::Config/struct>.

=back

=head1 SEE ALSO

=over

=item * L<NewFangle>

=item * L<NewFangle::Agent>

=item * L<NewFangle::Agent::Config>

=back

=head1 COPYRIGHT AND LICENSE

Copyright 2021 CV-Library Ltd.

This library is free software; you can redistribute it and/or modify it under
the Artistic License 2.0.
