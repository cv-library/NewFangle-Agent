#!/usr/bin/env perl

use strict;
use warnings;
use lib 'lib';

use Config;
use File::Share 'dist_file';
use Getopt::Long qw( :config pass_through );

require NewFangle::Agent::Config;    # Do not initialise

my $command = shift;
$command = 'version' if $command && $command =~ /^(?:--version|-v)$/;

get_command( $command // 'help' )->();

sub do_version {
    GetOptions \my %opt => qw( help );

    if ( $opt{help} ) {
        print <<'USAGE';
Usage: newrelic-admin version

Print the version of the relevant libraries.
USAGE
        return;
    }

    require NewFangle;
    require NewFangle::Agent;

    no strict 'refs';

    print <<"VERSION";
$0 v$NewFangle::Agent::VERSION

Supporting libraries:
* FFI::Platypus  v$FFI::Platypus::VERSION
* NewFangle      v$NewFangle::VERSION
* libnewrelic    v@{[ NewFangle::newrelic_version() ]}
VERSION
}

sub do_run_perl {
    GetOptions \my %opt => qw( help tx=s );

    if ( $opt{help} ) {
        print <<'USAGE';
Usage: newrelic-admin run-perl [--tx <transaction-name>] ...

Executes the Perl interpreter with the supplied arguments but forces
the initialisation of the agent and wraps the command in a transaction.

If using an agent configuration file, the path to the file should be
supplied by the environment variable NEWRELIC_CONFIG_FILE. Alternatively,
just the licence key, application and log file details can be supplied via
environment variables NEWRELIC_LICENSE_KEY, NEWRELIC_APP_NAME and
NEWRELIC_LOG_FILE.

NewRelic is initialised for the host specified in NEWRELIC_DAEMON_HOST
The transaction name specified is initiated for the App specified in
NEWRELIC_APP_NAME
USAGE
        return;
    }

    # the transaction name can be passed in as an option
    # or we default it to 'newrelic-admin'
    my $txn = $opt{tx} // 'newrelic-admin';

    # we need to make sure there is a command to run
    print_usage('run-perl') unless @ARGV;

    require NewFangle;
    require NewFangle::App;
    require NewFangle::Agent;
    require NewFangle::Agent::Config;

    my $config = NewFangle::Agent::Config->local_settings;
    my $struct = NewFangle::Agent::Config->struct;

    # C Struct log levels are narrower
    NewFangle::newrelic_configure_log(
        @{ $struct->to_perl }{qw( log_filename log_level )}
    );

    NewFangle::newrelic_init( $config->{daemon_host}, 100 );

    my $app = eval { NewFangle::App->new( $struct, 100 ) };

    local $NewFangle::Agent::TX;
    $NewFangle::Agent::TX = $app->start_non_web_transaction($txn)
        if $app && $app->connected;

    my $exit_status = 0;
    if ( system $Config{perlpath}, '-MNewFangle::Agent', @ARGV ) {
        # oops, something went wrong
        $exit_status = $?;
        $exit_status >>= 8;

        if ( $? == -1 ) {
            warn "failed to execute: $!\n";
        }
        elsif ( $? & 127 ) {
            warn sprintf "child process died with signal %d, %s coredump\n",
                ( $? & 127 ),
                ( $? & 128 ) ? 'with' : 'without';
        }
        else {
            warn sprintf "child process exited with value %d\n", $exit_status;
        }
    }

    exit $exit_status;
}

sub do_license_key {
    GetOptions \my %opt => qw( help );

    if ( $opt{help} ) {
        print <<'USAGE';
Usage: newrelic-admin license-key <config-file> [log-file]

Prints out the account license key after having loaded the settings
from <config-file>.
USAGE
        return;
    }

    print_usage('license-key') unless @ARGV;

    my ( $config, $log ) = @ARGV;
    undef $config if $config eq '-';

    $log //= '/tmp/perl-agent-test.log';
    unlink $log;

    NewFangle::Agent::Config::initialize(
        config_file   => $config,
        ignore_errors => 0,
        log_file      => $log,
        log_level     => 'DEBUG',
    );

    my $settings = NewFangle::Agent::Config->global_settings;

    print 'license_key = ' . $settings->{license_key} . "\n";
}

sub do_generate_config {
    GetOptions \my %opt => qw( help );

    if ( $opt{help} ) {
        print <<'USAGE';
Usage: newrelic-admin generate-config <license-key> [target-path]

Generates a sample agent configuration file for <license_key>.
USAGE
        return;
    }

    print_usage('generate-config') unless @ARGV;

    my ( $key, $target ) = @ARGV;

    my $content = do {
        require NewFangle::Agent;
        open my $fh, '<', dist_file 'NewFangle-Agent', 'newrelic.yml'
            or die "Could not read config template: $!";
        local $/, <$fh>;
    };

    $content =~ s/\Q*** REPLACE ME ***\E/$key/g if $key;

    my $fh;
    if ($target) {
        open $fh, '>', $target
            or die "Could not write to $target: $!";
    }
    else {
        $fh = *STDOUT;
    }

    print $fh $content;
}

sub do_local_config {
    GetOptions \my %opt => qw( help log-file=s );

    if ( $opt{help} ) {
        print <<'USAGE';
Usage: newrelic-admin local-config <config-file> [log-file]

Dumps out the local agent configuration after having loaded the settings
from <config-file>. If a hyphen (-) is used as the value for <config-file>,
the default values will be used instead.

Note: this command requires the YAML::XS module to be available.
USAGE
        return;
    }

    print_usage('local-config') unless @ARGV;

    my $config = $ARGV[0];
    undef $config if $ARGV[0] eq '-';

    NewFangle::Agent::Config::initialize(
        config_file => $config,
        log_file    => $opt{'log-file'},
    );

    require YAML::XS;
    print YAML::XS::Dump( NewFangle::Agent::Config->global_settings );
}

sub do_help {
    GetOptions \my %opt => qw( help );

    print_usage( $ARGV[0], 0 ) if $ARGV[0];

    print <<'USAGE';
Usage: newrelic-admin COMMAND [options]

Type 'newrelic-admin help <command>'
for help on a specific command.

Available commands are:
USAGE

    print " $_\n"
        for sort map { s/^do_//; y/_/-/; $_ } grep /^do_/, keys %main::;
}

sub get_command {
    my $command = shift;

    my $code = $main::{ 'do_' . ( $command =~ s/-/_/gr ) };

    unless ($code) {
        print "Unknown command '$command'. Type '$0 help' for usage\n";
        exit 1;
    }

    $code;
}

sub print_usage {
    my ( $command, $code ) = @_;
    local @ARGV = qw( --help );
    get_command($command)->();
    exit( $code // 1 );
}
